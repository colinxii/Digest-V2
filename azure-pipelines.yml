# Azure DevOps Pipeline for CRM Digest Node.js App
# Deploy to Azure Web App

trigger:
- main
- master

variables:
  # Azure service connection name (update this to match your service connection)
  azureSubscription: 'your-azure-service-connection'
  
  # Web app name (update this to match your Azure Web App name)
  webAppName: 'your-webapp-name'
  
  # Environment name
  environmentName: 'production'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Node.js version
  nodeVersion: '18.x'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'npm clean install'

    - script: |
        npm run test
      displayName: 'Run tests'
      continueOnError: false

    - script: |
        # Create production build directory
        mkdir -p $(Build.ArtifactStagingDirectory)/app
        
        # Copy application files
        cp -r . $(Build.ArtifactStagingDirectory)/app/
        
        # Remove dev dependencies and test files from production build
        cd $(Build.ArtifactStagingDirectory)/app
        rm -rf node_modules
        npm ci --only=production
        
        # Remove unnecessary files for production
        rm -f azure-pipelines.yml
        rm -f .gitignore
        rm -f README.md
        rm -f test.js
        rm -rf .git
      displayName: 'Prepare production build'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/app'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppName)
              runtimeStack: 'NODE|18-lts'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm start'
              appSettings: |
                -PORT 8080
                -NODE_ENV production

          - task: AzureAppServiceManage@0
            displayName: 'Restart Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              action: 'Restart Azure App Service'
              webAppName: $(webAppName)

# Optional: Add a stage for smoke tests after deployment
- stage: SmokeTest
  displayName: Smoke test stage
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: SmokeTest
    displayName: Smoke test
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # Wait for app to start
        sleep 30
        
        # Test health endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/health)
        if [ $response -eq 200 ]; then
          echo "Health check passed"
        else
          echo "Health check failed with status code: $response"
          exit 1
        fi
        
        # Test main endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/)
        if [ $response -eq 200 ]; then
          echo "Main endpoint check passed"
        else
          echo "Main endpoint check failed with status code: $response"
          exit 1
        fi
      displayName: 'Run smoke tests'
